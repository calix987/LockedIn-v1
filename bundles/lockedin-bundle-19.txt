LOCKEDIN â€” BUNDLE 19: RECRUITER TOOLS (Talent Sourcing, Job Posting, Pipelines, Youth-Safe Outreach)
================================================================================

This bundle adds recruiter-side features: verified employer onboarding, job posting wizard, candidate search (skills/filters), pipeline & notes, talent pools, messaging templates (no direct outreach to minors unless employer is verified & job is youth-safe), and compliance guards.
It builds on existing entities (User, Job, Application) and adds Company, RecruiterProfile, CandidateTag, TalentPool, PipelineStage, OutreachMessage.

--------------------------------------------------------------------------------
FILES
--------------------------------------------------------------------------------

backend/prisma/schema.prisma (additions)
----------------------------------------
model Company {
  id             String   @id @default(cuid())
  name           String
  domain         String?  @unique
  website        String?
  verified       Boolean  @default(false)
  verificationAt DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  recruiters     RecruiterProfile[]
  jobs           Job[]
}

model RecruiterProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id])
  companyId       String?
  company         Company? @relation(fields: [companyId], references: [id])
  title           String?
  isAdmin         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  // Audit
  lastSeenAt      DateTime?
}

model Job {
  id              String   @id @default(cuid())
  title           String
  companyName     String
  companyId       String?
  company         Company?  @relation(fields: [companyId], references: [id])
  description     String
  locationType    String    // REMOTE | ONSITE | HYBRID
  locations       String[]
  payMin          Int?
  payMax          Int?
  payType         String?   // HOURLY | SALARY | STIPEND
  currency        String?   @default("USD")
  experienceLevel String?   // ENTRY | JUNIOR | MID | SENIOR
  minAge          Int?      // >= 13
  openToMinors    Boolean   @default(false)
  verifiedCompany Boolean   @default(false)
  verifiedPay     Boolean   @default(false)
  requiredSkills  String[]
  preferredSkills String[]
  benefits        String[]
  tags            String[]
  externalUrl     String?
  status          String    @default("OPEN") // OPEN | PAUSED | CLOSED
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  // Relations
  applications    Application[]
  // Visibility windows
  publishAt       DateTime? 
  closeAt         DateTime?
}

model PipelineStage {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  name      String
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CandidateTag {
  id        String   @id @default(cuid())
  companyId String
  company   Company  @relation(fields: [companyId], references: [id])
  label     String
  color     String?  // hex
  createdAt DateTime @default(now())
}

model TalentPool {
  id         String   @id @default(cuid())
  companyId  String
  company    Company  @relation(fields: [companyId], references: [id])
  name       String
  note       String?
  candidateIds String[]  // User IDs
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model OutreachMessage {
  id           String   @id @default(cuid())
  companyId    String
  company      Company  @relation(fields: [companyId], references: [id])
  recruiterId  String
  recruiter    RecruiterProfile @relation(fields: [recruiterId], references: [id])
  toUserId     String
  toUser       User     @relation(fields: [toUserId], references: [id])
  jobId        String?
  job          Job?     @relation(fields: [jobId], references: [id])
  subject      String
  body         String
  // Compliance flags
  visibility   String   @default("COMPANY") // COMPANY | ADMIN | AUDIT
  createdAt    DateTime @default(now())
}

model Application {
  id             String   @id @default(cuid())
  jobId          String
  userId         String
  status         String   @default("SAVED") // SAVED | DRAFTED | APPLIED | INTERVIEW | OFFER | REJECTED
  coverLetter    String?
  tailoredResume Json?
  fitScore       Int?
  keywordMatches String[]
  missingKeywords String[]
  notes          String?
  interviewDate  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  // New
  stageId        String?
  stage          PipelineStage? @relation(fields: [stageId], references: [id])
}


backend/services/recruiter/src/index.ts
---------------------------------------
import express from "express";
import cors from "cors";
import helmet from "helmet";
import rateLimit from "express-rate-limit";
import recruiterRoutes from "./routes/recruiter";
import { youthSafetyGuard } from "./middleware/youthSafetyGuard";

const app = express();
app.use(helmet());
app.use(cors());
app.use(express.json({ limit: "1mb" }));
app.use(rateLimit({ windowMs: 60_000, max: 120 }));

// Global youth-safe guard for outbound recruiter actions
app.use(youthSafetyGuard);

app.use("/api/recruiter", recruiterRoutes);

app.get("/health", (_req, res) => res.json({ ok: true }));

const port = process.env.RECRUITER_PORT || 8086;
app.listen(port, () => console.log(`[recruiter] listening on ${port}`));


backend/services/recruiter/src/middleware/youthSafetyGuard.ts
-------------------------------------------------------------
import type { Request, Response, NextFunction } from "express";

// Basic content filter for outreach + enforcement for minors.
const DISALLOWED_TERMS = [
  // no arranging in-person meetups on-platform
  "meet in person",
  "come to my house",
  "hotel",
  "pick up",
  "no guardian",
  "after hours at my place",
];

export function youthSafetyGuard(req: Request, res: Response, next: NextFunction) {
  // Only check messaging/outreach and job posting write paths
  const isWrite = ["POST", "PUT", "PATCH"].includes(req.method);
  if (!isWrite) return next();

  const path = req.path.toLowerCase();

  // prevent outreach to minors by unverified companies or non-youth-safe job IDs
  if (path.includes("/outreach")) {
    const { toUser, job, body } = req.body || {};
    if (toUser?.age_mode === "YOUTH") {
      if (!req.headers["x-company-verified"] || req.headers["x-company-verified"] !== "true") {
        return res.status(403).json({ error: "Outreach to minors requires verified company." });
      }
      if (job && job.open_to_minors !== true) {
        return res.status(403).json({ error: "Job is not flagged as youth-friendly." });
      }
    }
    const content = `${body?.subject ?? ""} ${body?.body ?? ""}`.toLowerCase();
    if (DISALLOWED_TERMS.some(t => content.includes(t))) {
      return res.status(400).json({ error: "Message content violates safety policy." });
    }
  }
  next();
}


backend/services/recruiter/src/routes/recruiter.ts
--------------------------------------------------
import { Router } from "express";
import * as ctrl from "../usecases";
const r = Router();

// Company & recruiter profile
r.get("/company/me", ctrl.getMyCompany);
r.post("/company", ctrl.createOrAttachCompany);
r.patch("/company", ctrl.updateCompany);
r.post("/company/verify-request", ctrl.requestVerification);

// Job posting
r.post("/jobs", ctrl.createJob);
r.get("/jobs", ctrl.listJobs);
r.patch("/jobs/:id", ctrl.updateJob);
r.post("/jobs/:id/pause", ctrl.pauseJob);
r.post("/jobs/:id/close", ctrl.closeJob);

// Pipeline
r.get("/pipeline/stages", ctrl.listStages);
r.post("/pipeline/stages", ctrl.createStage);
r.patch("/pipeline/stages/:id", ctrl.updateStage);
r.post("/applications/:id/move/:stageId", ctrl.moveApplication);

// Candidate search
r.post("/candidates/search", ctrl.searchCandidates);

// Talent pools
r.get("/talent-pools", ctrl.listPools);
r.post("/talent-pools", ctrl.createPool);
r.patch("/talent-pools/:id", ctrl.updatePool);

// Outreach (compliant)
r.post("/outreach", ctrl.sendOutreach);

export default r;


backend/services/recruiter/src/usecases/index.ts
------------------------------------------------
import { prisma } from "../../shared/prisma";
import { Request, Response } from "express";

export async function getMyCompany(req: Request, res: Response) {
  const userId = req.headers["x-user-id"] as string;
  const recruiter = await prisma.recruiterProfile.findUnique({ where: { userId }, include: { company: true } });
  if (!recruiter) return res.status(404).json({ error: "Recruiter profile not found" });
  res.json(recruiter.company ?? null);
}

export async function createOrAttachCompany(req: Request, res: Response) {
  const userId = req.headers["x-user-id"] as string;
  const { name, domain, website } = req.body;
  const recruiter = await prisma.recruiterProfile.upsert({
    where: { userId },
    update: {},
    create: { userId },
  });
  let company = await prisma.company.findFirst({ where: { domain } });
  if (!company) {
    company = await prisma.company.create({ data: { name, domain, website } });
  }
  await prisma.recruiterProfile.update({
    where: { id: recruiter.id },
    data: { companyId: company.id }
  });
  res.json(company);
}

export async function updateCompany(req: Request, res: Response) {
  const userId = req.headers["x-user-id"] as string;
  const recruiter = await prisma.recruiterProfile.findUnique({ where: { userId } });
  if (!recruiter?.companyId) return res.status(400).json({ error: "No company attached" });
  const company = await prisma.company.update({
    where: { id: recruiter.companyId },
    data: req.body,
  });
  res.json(company);
}

export async function requestVerification(req: Request, res: Response) {
  const userId = req.headers["x-user-id"] as string;
  const recruiter = await prisma.recruiterProfile.findUnique({ where: { userId }, include: { company: true } });
  if (!recruiter?.company) return res.status(400).json({ error: "No company attached" });
  // In a real system this would enqueue a manual review.
  res.json({ ok: true, message: "Verification requested. We'll reach out by email." });
}

// Jobs
export async function createJob(req: Request, res: Response) {
  const userId = req.headers["x-user-id"] as string;
  const recruiter = await prisma.recruiterProfile.findUnique({ where: { userId } });
  if (!recruiter?.companyId) return res.status(400).json({ error: "Attach a company first" });
  const data = req.body;
  const job = await prisma.job.create({
    data: {
      title: data.title,
      companyName: data.companyName ?? (await prisma.company.findUnique({ where: { id: recruiter.companyId } }))!.name,
      companyId: recruiter.companyId,
      description: data.description,
      locationType: data.location_type,
      locations: data.locations ?? [],
      payMin: data.pay_min,
      payMax: data.pay_max,
      payType: data.pay_type,
      currency: data.currency ?? "USD",
      experienceLevel: data.experience_level,
      minAge: data.min_age,
      openToMinors: data.open_to_minors ?? false,
      verifiedCompany: data.verified_company ?? false,
      verifiedPay: data.verified_pay ?? false,
      requiredSkills: data.required_skills ?? [],
      preferredSkills: data.preferred_skills ?? [],
      benefits: data.benefits ?? [],
      tags: data.tags ?? [],
      externalUrl: data.external_url,
      publishAt: data.publish_at ? new Date(data.publish_at) : null,
      closeAt: data.close_at ? new Date(data.close_at) : null,
    }
  });
  res.status(201).json(job);
}

export async function listJobs(req: Request, res: Response) {
  const userId = req.headers["x-user-id"] as string;
  const recruiter = await prisma.recruiterProfile.findUnique({ where: { userId } });
  if (!recruiter?.companyId) return res.json([]);
  const jobs = await prisma.job.findMany({ where: { companyId: recruiter.companyId }, orderBy: { createdAt: "desc" } });
  res.json(jobs);
}

export async function updateJob(req: Request, res: Response) {
  const userId = req.headers["x-user-id"] as string;
  const recruiter = await prisma.recruiterProfile.findUnique({ where: { userId } });
  if (!recruiter?.companyId) return res.status(400).json({ error: "No company" });
  const id = req.params.id;
  const job = await prisma.job.update({ where: { id }, data: req.body });
  res.json(job);
}

export async function pauseJob(req: Request, res: Response) {
  const id = req.params.id;
  const job = await prisma.job.update({ where: { id }, data: { status: "PAUSED" } });
  res.json(job);
}

export async function closeJob(req: Request, res: Response) {
  const id = req.params.id;
  const job = await prisma.job.update({ where: { id }, data: { status: "CLOSED" } });
  res.json(job);
}

// Pipeline
export async function listStages(req: Request, res: Response) {
  const userId = req.headers["x-user-id"] as string;
  const recruiter = await prisma.recruiterProfile.findUnique({ where: { userId } });
  if (!recruiter?.companyId) return res.json([]);
  const stages = await prisma.pipelineStage.findMany({ where: { companyId: recruiter.companyId }, orderBy: { order: "asc" } });
  res.json(stages);
}
export async function createStage(req: Request, res: Response) {
  const userId = req.headers["x-user-id"] as string;
  const recruiter = await prisma.recruiterProfile.findUnique({ where: { userId } });
  if (!recruiter?.companyId) return res.status(400).json({ error: "No company" });
  const { name, order } = req.body;
  const stage = await prisma.pipelineStage.create({ data: { name, order, companyId: recruiter.companyId } });
  res.status(201).json(stage);
}
export async function updateStage(req: Request, res: Response) {
  const id = req.params.id;
  const stage = await prisma.pipelineStage.update({ where: { id }, data: req.body });
  res.json(stage);
}
export async function moveApplication(req: Request, res: Response) {
  const { id, stageId } = { id: req.params.id, stageId: req.params.stageId };
  const app = await prisma.application.update({ where: { id }, data: { stageId } });
  res.json(app);
}

// Candidate search (very simple demo; real impl would be vector search)
export async function searchCandidates(req: Request, res: Response) {
  const { query, skills = [], location, openToMinors } = req.body ?? {};
  // Simulate via profile table (User)
  const where: any = {};
  if (location) where.OR = [{ city: { contains: location, mode: "insensitive" } }, { country: { contains: location, mode: "insensitive" } }];
  if (openToMinors === true) where.age_mode = "YOUTH";
  if (skills?.length) where.skills = { hasSome: skills };
  if (query) where.OR = [...(where.OR ?? []), { full_name: { contains: query, mode: "insensitive" } }, { headline: { contains: query, mode: "insensitive" } }];
  const users = await prisma.user.findMany({
    where,
    select: { id: true, full_name: true, headline: true, city: true, country: true, skills: true, age_mode: true, availability_hours: true }
  });
  res.json(users);
}

// Talent pools
export async function listPools(req: Request, res: Response) {
  const userId = req.headers["x-user-id"] as string;
  const recruiter = await prisma.recruiterProfile.findUnique({ where: { userId } });
  if (!recruiter?.companyId) return res.json([]);
  const pools = await prisma.talentPool.findMany({ where: { companyId: recruiter.companyId } });
  res.json(pools);
}
export async function createPool(req: Request, res: Response) {
  const userId = req.headers["x-user-id"] as string;
  const recruiter = await prisma.recruiterProfile.findUnique({ where: { userId } });
  if (!recruiter?.companyId) return res.status(400).json({ error: "No company" });
  const { name, note, candidateIds = [] } = req.body;
  const pool = await prisma.talentPool.create({ data: { name, note, candidateIds, companyId: recruiter.companyId } });
  res.status(201).json(pool);
}
export async function updatePool(req: Request, res: Response) {
  const id = req.params.id;
  const pool = await prisma.talentPool.update({ where: { id }, data: req.body });
  res.json(pool);
}

// Outreach
export async function sendOutreach(req: Request, res: Response) {
  const userId = req.headers["x-user-id"] as string;
  const recruiter = await prisma.recruiterProfile.findUnique({ where: { userId }, include: { company: true } });
  if (!recruiter?.company) return res.status(400).json({ error: "No company" });
  const { toUserId, subject, body, jobId } = req.body;
  // Store for audit
  const record = await prisma.outreachMessage.create({
    data: {
      companyId: recruiter.companyId!,
      recruiterId: recruiter.id,
      toUserId,
      subject,
      body,
      jobId: jobId ?? null,
    }
  });
  // In a real system: enqueue notification/email
  res.status(201).json({ ok: true, id: record.id });
}


backend/services/recruiter/shared/prisma.ts
-------------------------------------------
import { PrismaClient } from "@prisma/client";
export const prisma = new PrismaClient();


frontend/apps/web/src/pages/recruiter/RecruiterLayout.tsx
----------------------------------------------------------
import React from "react";
import Layout from "@/layout/Layout"; // uses LockedInLogo and sidebar
export default function RecruiterLayout({ children }: { children: React.ReactNode }) {
  return <Layout currentPageName="Recruiter">{children}</Layout>;
}


frontend/apps/web/src/pages/recruiter/Dashboard.tsx
----------------------------------------------------
import React, { useEffect, useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { BriefcaseIcon, UsersIcon, SparklesIcon, ShieldCheckIcon } from "lucide-react";
import { motion } from "framer-motion";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function RecruiterDashboard() {
  const [stats, setStats] = useState<any>(null);

  useEffect(() => {
    // Placeholder: fetch recruiter/company stats
    setStats({ jobs: 3, candidates: 128, verified: false });
  }, []);

  return (
    <div className="p-6 md:p-8">
      <div className="max-w-6xl mx-auto space-y-8">
        <div className="flex items-center justify-between">
          <h1 className="text-3xl font-bold text-gray-900">Recruiter Console</h1>
          <Link to={createPageUrl("RecruiterJobWizard")}>
            <Button className="bg-gradient-to-r from-indigo-500 to-indigo-600 text-white">
              <BriefcaseIcon className="w-4 h-4 mr-2" />
              Post a Job
            </Button>
          </Link>
        </div>

        <div className="grid md:grid-cols-3 gap-6">
          {[
            { label:"Open Jobs", value: stats?.jobs ?? 0, icon: BriefcaseIcon },
            { label:"Candidates", value: stats?.candidates ?? 0, icon: UsersIcon },
            { label:"Company Verified", value: stats?.verified ? "Yes" : "Pending", icon: ShieldCheckIcon },
          ].map((s, i) => (
            <motion.div key={i} initial={{opacity:0,y:10}} animate={{opacity:1,y:0}}>
              <Card className="bg-white/90 border border-gray-200/60">
                <CardHeader><CardTitle className="flex items-center gap-2"><s.icon className="w-5 h-5 text-indigo-600"/>{s.label}</CardTitle></CardHeader>
                <CardContent><div className="text-3xl font-bold">{s.value}</div></CardContent>
              </Card>
            </motion.div>
          ))}
        </div>

        <Card className="bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200/60">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-indigo-900">
              <SparklesIcon className="w-5 h-5 text-indigo-600"/> Smart Suggestions
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="list-disc pl-6 text-indigo-800 text-sm">
              <li>Boost visibility for entry-level, youth-friendly roles with verified pay.</li>
              <li>Create a talent pool from high-fit applicants to re-engage next cycle.</li>
              <li>Use templates for safe, compliant outreachâ€”no meeting requests or personal contact asks.</li>
            </ul>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


frontend/apps/web/src/pages/recruiter/JobPostWizard.tsx
--------------------------------------------------------
import React, { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { SparklesIcon } from "lucide-react";

export default function JobPostWizard() {
  const [form, setForm] = useState<any>({
    title: "", description:"", location_type:"REMOTE", locations:[], pay_min:null, pay_max:null, pay_type:"SALARY", 
    experience_level:"ENTRY", min_age:16, open_to_minors:false, required_skills:[], preferred_skills:[], benefits:[]
  });
  const [skill, setSkill] = useState("");

  const addSkill = () => {
    if (skill.trim()) setForm((f:any)=>({...f, required_skills:[...(f.required_skills||[]), skill.trim()]}));
    setSkill("");
  };

  const submit = async () => {
    // POST to /api/recruiter/jobs (headers provide user/company context)
    alert("Job created (demo).");
  };

  return (
    <div className="p-6 md:p-8">
      <div className="max-w-3xl mx-auto">
        <Card className="bg-white/90 border border-gray-200/60">
          <CardHeader><CardTitle>Post a Job</CardTitle></CardHeader>
          <CardContent className="space-y-4">
            <Input placeholder="Job title" value={form.title} onChange={e=>setForm({...form, title:e.target.value})}/>
            <Textarea placeholder="Description" value={form.description} onChange={e=>setForm({...form, description:e.target.value})}/>
            <div className="grid md:grid-cols-2 gap-3">
              <Input placeholder="Min Pay" type="number" onChange={e=>setForm({...form, pay_min: parseInt(e.target.value)})}/>
              <Input placeholder="Max Pay" type="number" onChange={e=>setForm({...form, pay_max: parseInt(e.target.value)})}/>
            </div>
            <div className="flex items-center gap-3">
              <Switch checked={form.open_to_minors} onCheckedChange={(v)=>setForm({...form, open_to_minors: !!v})}/>
              <span className="text-sm text-gray-700">Youth-friendly role</span>
            </div>
            <div className="flex gap-2">
              <Input placeholder="Add required skill" value={skill} onChange={e=>setSkill(e.target.value)} onKeyDown={e=>e.key==="Enter"&&addSkill()}/>
              <Button onClick={addSkill} size="sm"><SparklesIcon className="w-4 h-4 mr-1"/>Add</Button>
            </div>
            <div className="flex flex-wrap gap-2">
              {(form.required_skills||[]).map((s:string)=>(<Badge key={s} variant="secondary">{s}</Badge>))}
            </div>
            <Button className="bg-gradient-to-r from-indigo-500 to-indigo-600 text-white" onClick={submit}>Create Job</Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


frontend/apps/web/src/pages/recruiter/CandidateSearch.tsx
----------------------------------------------------------
import React, { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { UsersIcon, MapPinIcon, SparklesIcon } from "lucide-react";

type Candidate = { id:string; full_name:string; headline:string; city?:string; country?:string; skills:string[]; age_mode?:string; };

export default function CandidateSearch() {
  const [query, setQuery] = useState("");
  const [skill, setSkill] = useState("");
  const [skills, setSkills] = useState<string[]>([]);
  const [youth, setYouth] = useState(false);
  const [results, setResults] = useState<Candidate[]>([]);

  const addSkill = () => { if (skill.trim()) setSkills([...skills, skill.trim()]); setSkill(""); };
  const search = async () => {
    // POST /api/recruiter/candidates/search
    setResults([
      { id:"u1", full_name:"Jordan A.", headline:"Aspiring SWE", city:"Toronto", country:"CA", skills:["JS","React"], age_mode: youth?"YOUTH":"ADULT" }
    ]);
  };

  return (
    <div className="p-6 md:p-8">
      <div className="max-w-6xl mx-auto">
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-2xl md:text-3xl font-bold text-gray-900 flex items-center gap-2"><UsersIcon className="w-6 h-6 text-indigo-600"/> Candidate Search</h1>
          <Button className="bg-gradient-to-r from-indigo-500 to-indigo-600 text-white" onClick={search}><SparklesIcon className="w-4 h-4 mr-2"/>Search</Button>
        </div>
        <Card className="bg-white/90 border border-gray-200/60 mb-6">
          <CardHeader><CardTitle>Filters</CardTitle></CardHeader>
          <CardContent className="space-y-3">
            <Input placeholder="Keywords (name, headline)" value={query} onChange={e=>setQuery(e.target.value)}/>
            <div className="flex gap-2">
              <Input placeholder="Add skill" value={skill} onChange={e=>setSkill(e.target.value)} onKeyDown={e=>e.key==="Enter"&&addSkill()}/>
              <Button size="sm" onClick={addSkill}>Add</Button>
            </div>
            <div className="flex flex-wrap gap-2">{skills.map(s=>(<Badge key={s} variant="secondary">{s}</Badge>))}</div>
            <label className="text-sm flex items-center gap-2">
              <input type="checkbox" checked={youth} onChange={e=>setYouth(e.target.checked)}/> Youth profiles only
            </label>
          </CardContent>
        </Card>
        <div className="grid md:grid-cols-2 gap-6">
          {results.map(c=>(
            <Card key={c.id} className="bg-white/90 border border-gray-200/60">
              <CardHeader><CardTitle className="flex items-center gap-2">{c.full_name}<Badge variant="outline">{c.age_mode==="YOUTH"?"Youth":"Adult"}</Badge></CardTitle></CardHeader>
              <CardContent>
                <div className="text-gray-700">{c.headline}</div>
                <div className="flex items-center gap-2 text-gray-600 text-sm mt-1"><MapPinIcon className="w-4 h-4"/>{c.city}, {c.country}</div>
                <div className="flex flex-wrap gap-2 mt-3">{c.skills.map(s=>(<Badge key={s} className="bg-gray-100">{s}</Badge>))}</div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </div>
  );
}


frontend/apps/web/src/pages/recruiter/TalentPool.tsx
-----------------------------------------------------
import React, { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";

export default function TalentPool() {
  const [name, setName] = useState("");
  const [note, setNote] = useState("");
  const [candidateIds, setCandidateIds] = useState<string[]>([]);

  const save = async () => {
    // POST /api/recruiter/talent-pools
    alert("Pool saved (demo).");
  };

  return (
    <div className="p-6 md:p-8">
      <div className="max-w-3xl mx-auto">
        <Card className="bg-white/90 border border-gray-200/60">
          <CardHeader><CardTitle>Create Talent Pool</CardTitle></CardHeader>
          <CardContent className="space-y-4">
            <Input placeholder="Pool name" value={name} onChange={e=>setName(e.target.value)}/>
            <Input placeholder="Optional note" value={note} onChange={e=>setNote(e.target.value)}/>
            <div className="text-sm text-gray-600">Add candidate IDs (for demo)</div>
            <div className="flex gap-2">
              <Input placeholder="Candidate ID" onKeyDown={e=>{
                const v = (e.target as HTMLInputElement).value.trim();
                if (e.key==="Enter" && v) { setCandidateIds([...candidateIds, v]); (e.target as HTMLInputElement).value=""; }
              }}/>
            </div>
            <div className="flex flex-wrap gap-2">{candidateIds.map(id=>(<Badge key={id} variant="secondary">{id}</Badge>))}</div>
            <Button className="bg-gradient-to-r from-indigo-500 to-indigo-600 text-white" onClick={save}>Save Pool</Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


shared/contracts/recruiter.ts
-----------------------------
export type RecruiterCompany = {
  id: string; name: string; domain?: string; website?: string; verified: boolean;
};
export type RecruiterJobInput = {
  title: string; description: string; location_type: "REMOTE"|"ONSITE"|"HYBRID";
  locations?: string[]; pay_min?: number; pay_max?: number; pay_type?: "HOURLY"|"SALARY"|"STIPEND";
  currency?: string; experience_level?: "ENTRY"|"JUNIOR"|"MID"|"SENIOR"; min_age?: number;
  open_to_minors?: boolean; verified_pay?: boolean; required_skills?: string[]; preferred_skills?: string[];
  benefits?: string[]; tags?: string[]; external_url?: string; publish_at?: string; close_at?: string;
};
export type Candidate = { id:string; full_name:string; headline:string; city?:string; country?:string; skills:string[]; age_mode?: "YOUTH"|"ADULT" };


README.md
---------
# Bundle 19 â€” Recruiter Tools

**What this adds**
- Employer / recruiter profiles tied to Companies (with verification status).
- Job Posting Wizard (youth-safe toggle, verified pay flag).
- Candidate Search with skill/location filters and youth-only mode.
- Pipeline stages & moving applications.
- Talent Pools for long-term nurturing.
- Outreach messages logged for audit, with automated youth-safety guard.

**Safety & Compliance**
- Outreach to minors blocked unless company is verified AND the referenced job is youth-friendly.
- Simple content filter disallows meeting/unsafe phrases.
- No hardcoded secrets; pass `X-User-Id` and `X-Company-Verified` via your gateway/auth.

**Wire-up notes**
- Run Prisma migrate after merging schema updates.
- Mount recruiter service at `/api/recruiter` behind your API gateway with auth.
- Frontend routes to add: `/recruiter/dashboard`, `/recruiter/jobs/new`, `/recruiter/candidates`, `/recruiter/pools`.

**Tests (suggested)**
- Unit: safety guard blocks unsafe messages to youth.
- Integration: create company -> post job -> list -> move application between stages.

